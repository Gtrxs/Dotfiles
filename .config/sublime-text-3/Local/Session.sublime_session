{
	"folder_history":
	[
	],
	"last_version": 3143,
	"last_window_id": 5,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 1028.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 484.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"package control: enable package",
						"Package Control: Enable Package"
					],
					[
						"package control: insta",
						"Package Control: Install Package"
					],
					[
						"package control: install package",
						"Package Control: Install Package"
					],
					[
						"package control install package",
						"Package Control: Install Package"
					],
					[
						"",
						"Colorsublime: Browse Themes Online"
					],
					[
						"colorsubli",
						"Colorsublime: Install Theme"
					],
					[
						"package control",
						"Package Control: Install Package"
					],
					[
						"pack",
						"Install Package Control"
					]
				],
				"width": 831.0
			},
			"console":
			{
				"height": 185.0,
				"history":
				[
					" import urllib2,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0e\\f93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') ",
					" import urllib2,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') ",
					" import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/gtrx/.armitage.prop",
				"/etc/netctl/examples/wireless-wpa",
				"/etc/netctl/examples/wireless-wpa-static",
				"/home/gtrx/.zshrc",
				"/home/gtrx/.extend.Xresources",
				"/home/gtrx/.config/compton.conf",
				"/home/gtrx/.config/i3/config",
				"/etc/systemd/system/multi-user.target.wants/NetworkManager.service",
				"/etc/NetworkManager/NetworkManager.conf",
				"/home/gtrx/Downloads/kys.exe",
				"/home/gtrx/i3wm-themer/themes/Clouds/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Colors/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Water/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Subway/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Space/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Sky/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Nature/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Minimal/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Ice/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Grayscale/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Forest/.config/polybar/config",
				"/home/gtrx/.config/polybar/config",
				"/home/gtrx/i3wm-themer/backups/workingcrap/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Forest/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Clouds/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Colors/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Fire/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Grayscale/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Ice/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Minimal/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Nature/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Sky/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Space/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Subway/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Water/.config/polybar/config",
				"/home/gtrx/i3wm-themer/scripts/i3wmthemer",
				"/home/gtrx/i3wm-themer/themes/Fire/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Colors/.config/polybar/Find Results",
				"/etc/UPower/UPower.conf",
				"/usr/share/dbus-1/services/org.knopwob.dunst.service"
			],
			"find":
			{
				"height": 36.0
			},
			"find_in_files":
			{
				"height": 181.0,
				"where_history":
				[
					"/home/gtrx/i3wm-themer/templated_themes/Clouds/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Colors/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Fire/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Fire/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Forest/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Grayscale/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Ice/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Ice/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Minimal/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Nature/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Nature/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Sky/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Space/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Subway/.config/polybar,/home/gtrx/i3wm-themer/templated_themes/Water/.config/polybar",
					"/home/gtrx/i3wm-themer/themes/Fire/.config/polybar,/home/gtrx/i3wm-themer/themes/Forest/.config/polybar,/home/gtrx/i3wm-themer/themes/Grayscale/.config/polybar,/home/gtrx/i3wm-themer/themes/Ice/.config/polybar,/home/gtrx/i3wm-themer/themes/Minimal/.config/polybar,/home/gtrx/i3wm-themer/themes/Nature/.config/polybar,/home/gtrx/i3wm-themer/themes/Sky/.config/polybar,/home/gtrx/i3wm-themer/themes/Space/.config/polybar,/home/gtrx/i3wm-themer/themes/Subway/.config/polybar,/home/gtrx/i3wm-themer/themes/Water/.config/polybar,/home/gtrx/i3wm-themer/themes/Colors/.config/polybar,/home/gtrx/i3wm-themer/themes/Clouds/.config/polybar"
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"module-margin-right = 0",
					"module-margin-left = 0",
					"padding-right = 0",
					"padding-right = 0 ",
					"padding-right = 0 module-margin-left = 0 module-margin-right = 0 ",
					"padding-right = 0, module-margin-left = 0, module-margin-right = 0 ",
					"height = 20",
					"module-margin-left = 0",
					"padding-right = 0",
					"height = 20",
					"height = "
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"module-margin-right = 1",
					"module-margin-left = 1",
					"padding-right = 1",
					"padding-right = 0",
					"padding-right = 1",
					"padding-right = 1 module-margin-left = 1 module-margin-right = 1 ",
					"padding-right = 1, module-margin-left = 1, module-margin-right = 1 ",
					"height = 27",
					"module-margin-left = 1",
					"padding-right = 1",
					"height = 27"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 36.0
			},
			"input":
			{
				"height": 0.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 67.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 203.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 1914.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"file": "/home/gtrx/.config/i3/config",
					"settings":
					{
						"buffer_size": 7167,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/gtrx/.config/compton.conf",
					"settings":
					{
						"buffer_size": 8626,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/gtrx/.extend.Xresources",
					"settings":
					{
						"buffer_size": 1995,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/gtrx/.zshrc",
					"settings":
					{
						"buffer_size": 3204,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "",
					"file": "/etc/oidentd.conf",
					"file_size": -1,
					"file_write_time": -1,
					"settings":
					{
						"buffer_size": 0,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/gtrx/Desktop/afzaalace-synergy-stable-builds-c30301e/INSTALL",
					"settings":
					{
						"buffer_size": 78,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "/*\nMPU6050.h - Header file for the MPU6050 Triple Axis Gyroscope & Accelerometer Arduino Library.\n\nVersion: 1.0.3\n(c) 2014-2015 Korneliusz Jarzebski\nwww.jarzebski.pl\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the version 3 GNU General Public License as\npublished by the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef MPU6050_h\n#define MPU6050_h\n\n#if ARDUINO >= 100\n#include \"Arduino.h\"\n#else\n#include \"WProgram.h\"\n#endif\n\n#define MPU6050_ADDRESS             (0x68) // 0x69 when AD0 pin to Vcc\n\n#define MPU6050_REG_ACCEL_XOFFS_H     (0x06)\n#define MPU6050_REG_ACCEL_XOFFS_L     (0x07)\n#define MPU6050_REG_ACCEL_YOFFS_H     (0x08)\n#define MPU6050_REG_ACCEL_YOFFS_L     (0x09)\n#define MPU6050_REG_ACCEL_ZOFFS_H     (0x0A)\n#define MPU6050_REG_ACCEL_ZOFFS_L     (0x0B)\n#define MPU6050_REG_GYRO_XOFFS_H      (0x13)\n#define MPU6050_REG_GYRO_XOFFS_L      (0x14)\n#define MPU6050_REG_GYRO_YOFFS_H      (0x15)\n#define MPU6050_REG_GYRO_YOFFS_L      (0x16)\n#define MPU6050_REG_GYRO_ZOFFS_H      (0x17)\n#define MPU6050_REG_GYRO_ZOFFS_L      (0x18)\n#define MPU6050_REG_CONFIG            (0x1A)\n#define MPU6050_REG_GYRO_CONFIG       (0x1B) // Gyroscope Configuration\n#define MPU6050_REG_ACCEL_CONFIG      (0x1C) // Accelerometer Configuration\n#define MPU6050_REG_FF_THRESHOLD      (0x1D)\n#define MPU6050_REG_FF_DURATION       (0x1E)\n#define MPU6050_REG_MOT_THRESHOLD     (0x1F)\n#define MPU6050_REG_MOT_DURATION      (0x20)\n#define MPU6050_REG_ZMOT_THRESHOLD    (0x21)\n#define MPU6050_REG_ZMOT_DURATION     (0x22)\n#define MPU6050_REG_INT_PIN_CFG       (0x37) // INT Pin. Bypass Enable Configuration\n#define MPU6050_REG_INT_ENABLE        (0x38) // INT Enable\n#define MPU6050_REG_INT_STATUS        (0x3A)\n#define MPU6050_REG_ACCEL_XOUT_H      (0x3B)\n#define MPU6050_REG_ACCEL_XOUT_L      (0x3C)\n#define MPU6050_REG_ACCEL_YOUT_H      (0x3D)\n#define MPU6050_REG_ACCEL_YOUT_L      (0x3E)\n#define MPU6050_REG_ACCEL_ZOUT_H      (0x3F)\n#define MPU6050_REG_ACCEL_ZOUT_L      (0x40)\n#define MPU6050_REG_TEMP_OUT_H        (0x41)\n#define MPU6050_REG_TEMP_OUT_L        (0x42)\n#define MPU6050_REG_GYRO_XOUT_H       (0x43)\n#define MPU6050_REG_GYRO_XOUT_L       (0x44)\n#define MPU6050_REG_GYRO_YOUT_H       (0x45)\n#define MPU6050_REG_GYRO_YOUT_L       (0x46)\n#define MPU6050_REG_GYRO_ZOUT_H       (0x47)\n#define MPU6050_REG_GYRO_ZOUT_L       (0x48)\n#define MPU6050_REG_MOT_DETECT_STATUS (0x61)\n#define MPU6050_REG_MOT_DETECT_CTRL   (0x69)\n#define MPU6050_REG_USER_CTRL         (0x6A) // User Control\n#define MPU6050_REG_PWR_MGMT_1        (0x6B) // Power Management 1\n#define MPU6050_REG_WHO_AM_I          (0x75) // Who Am I\n\n#ifndef VECTOR_STRUCT_H\n#define VECTOR_STRUCT_H\nstruct Vector\n{\n    float XAxis;\n    float YAxis;\n    float ZAxis;\n};\n#endif\n\nstruct Activites\n{\n    bool isOverflow;\n    bool isFreeFall;\n    bool isInactivity;\n    bool isActivity;\n    bool isPosActivityOnX;\n    bool isPosActivityOnY;\n    bool isPosActivityOnZ;\n    bool isNegActivityOnX;\n    bool isNegActivityOnY;\n    bool isNegActivityOnZ;\n    bool isDataReady;\n};\n\ntypedef enum\n{\n    MPU6050_CLOCK_KEEP_RESET      = 0b111,\n    MPU6050_CLOCK_EXTERNAL_19MHZ  = 0b101,\n    MPU6050_CLOCK_EXTERNAL_32KHZ  = 0b100,\n    MPU6050_CLOCK_PLL_ZGYRO       = 0b011,\n    MPU6050_CLOCK_PLL_YGYRO       = 0b010,\n    MPU6050_CLOCK_PLL_XGYRO       = 0b001,\n    MPU6050_CLOCK_INTERNAL_8MHZ   = 0b000\n} mpu6050_clockSource_t;\n\ntypedef enum\n{\n    MPU6050_SCALE_2000DPS         = 0b11,\n    MPU6050_SCALE_1000DPS         = 0b10,\n    MPU6050_SCALE_500DPS          = 0b01,\n    MPU6050_SCALE_250DPS          = 0b00\n} mpu6050_dps_t;\n\ntypedef enum\n{\n    MPU6050_RANGE_16G             = 0b11,\n    MPU6050_RANGE_8G              = 0b10,\n    MPU6050_RANGE_4G              = 0b01,\n    MPU6050_RANGE_2G              = 0b00,\n} mpu6050_range_t;\n\ntypedef enum\n{\n    MPU6050_DELAY_3MS             = 0b11,\n    MPU6050_DELAY_2MS             = 0b10,\n    MPU6050_DELAY_1MS             = 0b01,\n    MPU6050_NO_DELAY              = 0b00,\n} mpu6050_onDelay_t;\n\ntypedef enum\n{\n    MPU6050_DHPF_HOLD             = 0b111,\n    MPU6050_DHPF_0_63HZ           = 0b100,\n    MPU6050_DHPF_1_25HZ           = 0b011,\n    MPU6050_DHPF_2_5HZ            = 0b010,\n    MPU6050_DHPF_5HZ              = 0b001,\n    MPU6050_DHPF_RESET            = 0b000,\n} mpu6050_dhpf_t;\n\ntypedef enum\n{\n    MPU6050_DLPF_6                = 0b110,\n    MPU6050_DLPF_5                = 0b101,\n    MPU6050_DLPF_4                = 0b100,\n    MPU6050_DLPF_3                = 0b011,\n    MPU6050_DLPF_2                = 0b010,\n    MPU6050_DLPF_1                = 0b001,\n    MPU6050_DLPF_0                = 0b000,\n} mpu6050_dlpf_t;\n\nclass MPU6050\n{\n    public:\n\n\tbool begin(mpu6050_dps_t scale = MPU6050_SCALE_2000DPS, mpu6050_range_t range = MPU6050_RANGE_2G, int mpua = MPU6050_ADDRESS);\n\n\tvoid setClockSource(mpu6050_clockSource_t source);\n\tvoid setScale(mpu6050_dps_t scale);\n\tvoid setRange(mpu6050_range_t range);\n\tmpu6050_clockSource_t getClockSource(void);\n\tmpu6050_dps_t getScale(void);\n\tmpu6050_range_t getRange(void);\n\tvoid setDHPFMode(mpu6050_dhpf_t dhpf);\n\tvoid setDLPFMode(mpu6050_dlpf_t dlpf);\n\tmpu6050_onDelay_t getAccelPowerOnDelay();\n\tvoid setAccelPowerOnDelay(mpu6050_onDelay_t delay);\n\n\tuint8_t getIntStatus(void);\n\n\tbool getIntZeroMotionEnabled(void);\n\tvoid setIntZeroMotionEnabled(bool state);\n\tbool getIntMotionEnabled(void);\n\tvoid setIntMotionEnabled(bool state);\n\tbool getIntFreeFallEnabled(void);\n\tvoid setIntFreeFallEnabled(bool state);\n\n\tuint8_t getMotionDetectionThreshold(void);\n\tvoid setMotionDetectionThreshold(uint8_t threshold);\n\tuint8_t getMotionDetectionDuration(void);\n\tvoid setMotionDetectionDuration(uint8_t duration);\n\n\tuint8_t getZeroMotionDetectionThreshold(void);\n\tvoid setZeroMotionDetectionThreshold(uint8_t threshold);\n\tuint8_t getZeroMotionDetectionDuration(void);\n\tvoid setZeroMotionDetectionDuration(uint8_t duration);\n\n\tuint8_t getFreeFallDetectionThreshold(void);\n\tvoid setFreeFallDetectionThreshold(uint8_t threshold);\n\tuint8_t getFreeFallDetectionDuration(void);\n\tvoid setFreeFallDetectionDuration(uint8_t duration);\n\n\tbool getSleepEnabled(void);\n\tvoid setSleepEnabled(bool state);\n\tbool getI2CMasterModeEnabled(void);\n\tvoid setI2CMasterModeEnabled(bool state);\n\tbool getI2CBypassEnabled(void);\n\tvoid setI2CBypassEnabled(bool state);\n\n\tfloat readTemperature(void);\n\tActivites readActivites(void);\n\n\tint16_t getGyroOffsetX(void);\n\tvoid setGyroOffsetX(int16_t offset);\n\tint16_t getGyroOffsetY(void);\n\tvoid setGyroOffsetY(int16_t offset);\n\tint16_t getGyroOffsetZ(void);\n\tvoid setGyroOffsetZ(int16_t offset);\n\n\tint16_t getAccelOffsetX(void);\n\tvoid setAccelOffsetX(int16_t offset);\n\tint16_t getAccelOffsetY(void);\n\tvoid setAccelOffsetY(int16_t offset);\n\tint16_t getAccelOffsetZ(void);\n\tvoid setAccelOffsetZ(int16_t offset);\n\n\tvoid calibrateGyro(uint8_t samples = 50);\n\tvoid setThreshold(uint8_t multiple = 1);\n\tuint8_t getThreshold(void);\n\n\tVector readRawGyro(void);\n\tVector readNormalizeGyro(void);\n\n\tVector readRawAccel(void);\n\tVector readNormalizeAccel(void);\n\tVector readScaledAccel(void);\n\n    private:\n\tVector ra, rg; // Raw vectors\n\tVector na, ng; // Normalized vectors\n\tVector tg, dg; // Threshold and Delta for Gyro\n\tVector th;     // Threshold\n\tActivites a;   // Activities\n\t\n\tfloat dpsPerDigit, rangePerDigit;\n\tfloat actualThreshold;\n\tbool useCalibrate;\n\tint mpuAddress;\n\n\tuint8_t fastRegister8(uint8_t reg);\n\n\tuint8_t readRegister8(uint8_t reg);\n\tvoid writeRegister8(uint8_t reg, uint8_t value);\n\n\tint16_t readRegister16(uint8_t reg);\n\tvoid writeRegister16(uint8_t reg, int16_t value);\n\n\tbool readRegisterBit(uint8_t reg, uint8_t pos);\n\tvoid writeRegisterBit(uint8_t reg, uint8_t pos, bool state);\n\n};\n\n#endif\n",
					"file": "/home/gtrx/.cache/.fr-pV0jBs/MPU6050/MPU6050.h",
					"file_size": 8035,
					"file_write_time": 130698430530000000,
					"settings":
					{
						"buffer_size": 8035,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "/*\n *    LedControl.h - A library for controling Leds with a MAX7219/MAX7221\n *    Copyright (c) 2007 Eberhard Fahle\n * \n *    Permission is hereby granted, free of charge, to any person\n *    obtaining a copy of this software and associated documentation\n *    files (the \"Software\"), to deal in the Software without\n *    restriction, including without limitation the rights to use,\n *    copy, modify, merge, publish, distribute, sublicense, and/or sell\n *    copies of the Software, and to permit persons to whom the\n *    Software is furnished to do so, subject to the following\n *    conditions:\n * \n *    This permission notice shall be included in all copies or \n *    substantial portions of the Software.\n * \n *    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n *    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n *    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n *    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n *    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n *    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n *    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n *    OTHER DEALINGS IN THE SOFTWARE.\n */\n\n#ifndef LedControl_h\n#define LedControl_h\n\n#if (ARDUINO >= 100)\n#include <Arduino.h>\n#else\n#include <WProgram.h>\n#endif\n\n/*\n * Segments to be switched on for characters and digits on\n * 7-Segment Displays\n */\nconst static byte charTable[128] = {\n    B01111110,B00110000,B01101101,B01111001,B00110011,B01011011,B01011111,B01110000,\n    B01111111,B01111011,B01110111,B00011111,B00001101,B00111101,B01001111,B01000111,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B10000000,B00000001,B10000000,B00000000,\n    B01111110,B00110000,B01101101,B01111001,B00110011,B01011011,B01011111,B01110000,\n    B01111111,B01111011,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B01110111,B00011111,B00001101,B00111101,B01001111,B01000111,B00000000,\n    B00110111,B00000000,B00000000,B00000000,B00001110,B00000000,B00000000,B00000000,\n    B01100111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001000,\n    B00000000,B01110111,B00011111,B00001101,B00111101,B01001111,B01000111,B00000000,\n    B00110111,B00000000,B00000000,B00000000,B00001110,B00000000,B00000000,B00000000,\n    B01100111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,\n    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000\n};\n\nclass LedControl {\n private :\n    /* The array for shifting the data to the devices */\n    byte spidata[16];\n    /* Send out a single command to the device */\n    void spiTransfer(int addr, byte opcode, byte data);\n\n    /* We keep track of the led-status for all 8 devices in this array */\n    byte status[64];\n    /* Data is shifted out of this pin*/\n    int SPI_MOSI;\n    /* The clock is signaled on this pin */\n    int SPI_CLK;\n    /* This one is driven LOW for chip selectzion */\n    int SPI_CS;\n    /* The maximum number of devices we use */\n    int maxDevices;\n    \n public:\n    /* \n     * Create a new controler \n     * Params :\n     * dataPin\t\tpin on the Arduino where data gets shifted out\n     * clockPin\t\tpin for the clock\n     * csPin\t\tpin for selecting the device \n     * numDevices\tmaximum number of devices that can be controled\n     */\n    LedControl(int dataPin, int clkPin, int csPin, int numDevices=1);\n\n    /*\n     * Gets the number of devices attached to this LedControl.\n     * Returns :\n     * int\tthe number of devices on this LedControl\n     */\n    int getDeviceCount();\n\n    /* \n     * Set the shutdown (power saving) mode for the device\n     * Params :\n     * addr\tThe address of the display to control\n     * status\tIf true the device goes into power-down mode. Set to false\n     *\t\tfor normal operation.\n     */\n    void shutdown(int addr, bool status);\n\n    /* \n     * Set the number of digits (or rows) to be displayed.\n     * See datasheet for sideeffects of the scanlimit on the brightness\n     * of the display.\n     * Params :\n     * addr\taddress of the display to control\n     * limit\tnumber of digits to be displayed (1..8)\n     */\n    void setScanLimit(int addr, int limit);\n\n    /* \n     * Set the brightness of the display.\n     * Params:\n     * addr\t\tthe address of the display to control\n     * intensity\tthe brightness of the display. (0..15)\n     */\n    void setIntensity(int addr, int intensity);\n\n    /* \n     * Switch all Leds on the display off. \n     * Params:\n     * addr\taddress of the display to control\n     */\n    void clearDisplay(int addr);\n\n    /* \n     * Set the status of a single Led.\n     * Params :\n     * addr\taddress of the display \n     * row\tthe row of the Led (0..7)\n     * col\tthe column of the Led (0..7)\n     * state\tIf true the led is switched on, \n     *\t\tif false it is switched off\n     */\n    void setLed(int addr, int row, int col, boolean state);\n\n    /* \n     * Set all 8 Led's in a row to a new state\n     * Params:\n     * addr\taddress of the display\n     * row\trow which is to be set (0..7)\n     * value\teach bit set to 1 will light up the\n     *\t\tcorresponding Led.\n     */\n    void setRow(int addr, int row, byte value);\n\n    /* \n     * Set all 8 Led's in a column to a new state\n     * Params:\n     * addr\taddress of the display\n     * col\tcolumn which is to be set (0..7)\n     * value\teach bit set to 1 will light up the\n     *\t\tcorresponding Led.\n     */\n    void setColumn(int addr, int col, byte value);\n\n    /* \n     * Display a hexadecimal digit on a 7-Segment Display\n     * Params:\n     * addr\taddress of the display\n     * digit\tthe position of the digit on the display (0..7)\n     * value\tthe value to be displayed. (0x00..0x0F)\n     * dp\tsets the decimal point.\n     */\n    void setDigit(int addr, int digit, byte value, boolean dp);\n\n    /* \n     * Display a character on a 7-Segment display.\n     * There are only a few characters that make sense here :\n     *\t'0','1','2','3','4','5','6','7','8','9','0',\n     *  'A','b','c','d','E','F','H','L','P',\n     *  '.','-','_',' ' \n     * Params:\n     * addr\taddress of the display\n     * digit\tthe position of the character on the display (0..7)\n     * value\tthe character to be displayed. \n     * dp\tsets the decimal point.\n     */\n    void setChar(int addr, int digit, char value, boolean dp);\n};\n\n#endif\t//LedControl.h\n\n\n\n",
					"file": "/home/gtrx/.cache/.fr-QKxBdp/LedControl/LedControl.h",
					"file_size": 6708,
					"file_write_time": 129917412420000000,
					"settings":
					{
						"buffer_size": 6708,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "/*\nDS3231.h - Header file for the DS3231 Real-Time Clock\n\nVersion: 1.0.1\n(c) 2014 Korneliusz Jarzebski\nwww.jarzebski.pl\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the version 3 GNU General Public License as\npublished by the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef DS3231_h\n#define DS3231_h\n\n#if ARDUINO >= 100\n#include \"Arduino.h\"\n#else\n#include \"WProgram.h\"\n#endif\n\n#define DS3231_ADDRESS              (0x68)\n\n#define DS3231_REG_TIME             (0x00)\n#define DS3231_REG_ALARM_1          (0x07)\n#define DS3231_REG_ALARM_2          (0x0B)\n#define DS3231_REG_CONTROL          (0x0E)\n#define DS3231_REG_STATUS           (0x0F)\n#define DS3231_REG_TEMPERATURE      (0x11)\n\n#ifndef RTCDATETIME_STRUCT_H\n#define RTCDATETIME_STRUCT_H\nstruct RTCDateTime\n{\n    uint16_t year;\n    uint8_t month;\n    uint8_t day;\n    uint8_t hour;\n    uint8_t minute;\n    uint8_t second;\n    uint8_t dayOfWeek;\n    uint32_t unixtime;\n};\n\nstruct RTCAlarmTime\n{\n    uint8_t day;\n    uint8_t hour;\n    uint8_t minute;\n    uint8_t second;\n};\n#endif\n\ntypedef enum\n{\n    DS3231_1HZ          = 0x00,\n    DS3231_4096HZ       = 0x01,\n    DS3231_8192HZ       = 0x02,\n    DS3231_32768HZ      = 0x03\n} DS3231_sqw_t;\n\ntypedef enum\n{\n    DS3231_EVERY_SECOND   = 0b00001111,\n    DS3231_MATCH_S        = 0b00001110,\n    DS3231_MATCH_M_S      = 0b00001100,\n    DS3231_MATCH_H_M_S    = 0b00001000,\n    DS3231_MATCH_DT_H_M_S = 0b00000000,\n    DS3231_MATCH_DY_H_M_S = 0b00010000\n} DS3231_alarm1_t;\n\ntypedef enum\n{\n    DS3231_EVERY_MINUTE   = 0b00001110,\n    DS3231_MATCH_M        = 0b00001100,\n    DS3231_MATCH_H_M      = 0b00001000,\n    DS3231_MATCH_DT_H_M   = 0b00000000,\n    DS3231_MATCH_DY_H_M   = 0b00010000\n} DS3231_alarm2_t;\n\nclass DS3231\n{\n    public:\n\n\tbool begin(void);\n\n\tvoid setDateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second);\n\tvoid setDateTime(uint32_t t);\n\tvoid setDateTime(const char* date, const char* time);\n\tRTCDateTime getDateTime(void);\n\tuint8_t isReady(void);\n\n\tDS3231_sqw_t getOutput(void);\n\tvoid setOutput(DS3231_sqw_t mode);\n\tvoid enableOutput(bool enabled);\n\tbool isOutput(void);\n\tvoid enable32kHz(bool enabled);\n\tbool is32kHz(void);\n\n\tvoid forceConversion(void);\n\tfloat readTemperature(void);\n\n\tvoid setAlarm1(uint8_t dydw, uint8_t hour, uint8_t minute, uint8_t second, DS3231_alarm1_t mode, bool armed = true);\n\tRTCAlarmTime getAlarm1(void);\n\tDS3231_alarm1_t getAlarmType1(void);\n\tbool isAlarm1(bool clear = true);\n\tvoid armAlarm1(bool armed);\n\tbool isArmed1(void);\n\tvoid clearAlarm1(void);\n\n\tvoid setAlarm2(uint8_t dydw, uint8_t hour, uint8_t minute, DS3231_alarm2_t mode, bool armed = true);\n\tRTCAlarmTime getAlarm2(void);\n\tDS3231_alarm2_t getAlarmType2(void);\n\tbool isAlarm2(bool clear = true);\n\tvoid armAlarm2(bool armed);\n\tbool isArmed2(void);\n\tvoid clearAlarm2(void);\n\n\tvoid setBattery(bool timeBattery, bool squareBattery);\n\n\tchar* dateFormat(const char* dateFormat, RTCDateTime dt);\n\tchar* dateFormat(const char* dateFormat, RTCAlarmTime dt);\n\n    private:\n\tRTCDateTime t;\n\n\tchar *strDayOfWeek(uint8_t dayOfWeek);\n\tchar *strMonth(uint8_t month);\n\tchar *strAmPm(uint8_t hour, bool uppercase);\n\tchar *strDaySufix(uint8_t day);\n\n\tuint8_t hour12(uint8_t hour24);\n\tuint8_t bcd2dec(uint8_t bcd);\n\tuint8_t dec2bcd(uint8_t dec);\n\n\tlong time2long(uint16_t days, uint8_t hours, uint8_t minutes, uint8_t seconds);\n\tuint16_t date2days(uint16_t year, uint8_t month, uint8_t day);\n\tuint8_t daysInMonth(uint16_t year, uint8_t month);\n\tuint16_t dayInYear(uint16_t year, uint8_t month, uint8_t day);\n\tbool isLeapYear(uint16_t year);\n\tuint8_t dow(uint16_t y, uint8_t m, uint8_t d);\n\n\tuint32_t unixtime(void);\n\tuint8_t conv2d(const char* p);\n\n\tvoid writeRegister8(uint8_t reg, uint8_t value);\n\tuint8_t readRegister8(uint8_t reg);\n};\n\n#endif",
					"file": "/home/gtrx/.cache/.fr-PphcQJ/DS3231/DS3231.h",
					"file_size": 4179,
					"file_write_time": 130623543000000000,
					"settings":
					{
						"buffer_size": 4179,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/gtrx/Downloads/Action_Plan_Madagascar__6_.docx",
					"settings":
					{
						"buffer_size": 240540,
						"encoding": "Hexadecimal",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/gtrx/.dunstrc",
					"settings":
					{
						"buffer_size": 7133,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/gtrx/bettercap/README.md",
					"settings":
					{
						"buffer_size": 3125,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/gtrx/.config/termite/Config.txt",
					"settings":
					{
						"buffer_size": 1044,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Package Control Messages\n========================\n\nGitGutter\n---------\n\n  1.7.10:\n  -------\n  \n    Enhancement:\n     - Add new SublimeLinter protected regions key\n     - Add support for custom environment variables\n     - Add protected regions for diff popup (Issue #476)\n  \n    Fix:\n     - mangled {{branch}} text when `git status` output is colored (Issue #474)\n  \n    README:\n     - Fix some typos\n     - Add description of \"diff_popup_protected_regions\" setting\n     - Add description of \"env\" setting\n  \n  \n  💛 Git Gutter? Want to support development?\n  \n  I've teamed up with Wes Bos to offer the following discounts:\n  \n  +------------------------------------------------+\n  |                                                |\n  |   Use the coupon code GITGUTTER for $10 off    |\n  |                                                |\n  +------------------------------------------------+\n  \n  🏅 ⭐ ES6 ⭐\n  \n  👉 ES6.io/friend/GITGUTTER\n  \n  🏅 ⭐ Sublime Text Book ⭐\n  \n  👉 SublimeTextBook.com/friend/GITGUTTER\n  \n  🏅 ⭐ React For Beginners ⭐\n  \n  👉 ReactForBeginners.com/friend/GITGUTTER\n  \n  \n  Join 15,000 other developers already learning with Wes Bos.\n  \n  These are fantastic resources - 100% money back guarantee! 🌟\n",
					"settings":
					{
						"buffer_size": 1222,
						"line_ending": "Unix",
						"name": "Package Control Messages",
						"read_only": true,
						"scratch": true
					}
				},
				{
					"file": "/home/gtrx/.config/rofi/config.txt",
					"settings":
					{
						"buffer_size": 0,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/gtrx/.config/polybar/config",
					"settings":
					{
						"buffer_size": 5691,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "Packages/C++/C++ Single File.sublime-build",
			"build_system_choices":
			[
				[
					[
						[
							"Packages/C++/C++ Single File.sublime-build",
							""
						],
						[
							"Packages/C++/C++ Single File.sublime-build",
							"Run"
						]
					],
					[
						"Packages/C++/C++ Single File.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 155.0,
				"last_filter": "package control: instaLL PACKAGE",
				"selected_items":
				[
					[
						"package control: instaLL PACKAGE",
						"Package Control: Install Package"
					],
					[
						"package control: enable package",
						"Package Control: Enable Package"
					],
					[
						"package control: insta",
						"Package Control: Install Package"
					],
					[
						"package control: install package",
						"Package Control: Install Package"
					],
					[
						"package control install package",
						"Package Control: Install Package"
					],
					[
						"",
						"Colorsublime: Browse Themes Online"
					],
					[
						"colorsubli",
						"Colorsublime: Install Theme"
					],
					[
						"package control",
						"Package Control: Install Package"
					],
					[
						"pack",
						"Install Package Control"
					]
				],
				"width": 831.0
			},
			"console":
			{
				"height": 185.0,
				"history":
				[
					" import urllib2,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0e\\f93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') ",
					" import urllib2,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') ",
					" import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/run/media/gtrx/boot/cmdline.txt",
				"/home/gtrx/.extend.Xresources",
				"/home/gtrx/.config/i3/i3lock.sh",
				"/home/gtrx/i3wm-themer/templated_themes/Colors/.config/polybar/config",
				"/home/gtrx/.zshrc",
				"/home/gtrx/.config/termite/Config.txt",
				"/home/gtrx/dotfiles/files/termiteconfig",
				"/home/gtrx/dotfiles/files/zshrc",
				"/home/gtrx/dotfiles/files/zprofile",
				"/home/gtrx/dotfiles/files/zsh/powerlevel9k.zsh",
				"/home/gtrx/.config/i3/config",
				"/home/gtrx/i3wm-themer/themes/Colors/.resources/.extend.Xresources",
				"/home/gtrx/dotfiles/files/i3config",
				"/usr/share/themes/Arc-Undead/gtk-3.0/gtk.cxx",
				"/usr/share/themes/Arc-Undead/gtk-3.0/gtk.css",
				"/home/gtrx/zshrc",
				"/home/gtrx/.config/ranger/rifle.conf",
				"/home/gtrx/.config/rofi/config.txt",
				"/home/gtrx/.config/polybar/config",
				"/home/gtrx/.config/ranger/rc.conf",
				"/home/gtrx/.dmenurc",
				"/home/gtrx/.Xresources",
				"/home/gtrx/.config/dconf/user",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/gtk-3.20/scss/_global.scss",
				"/home/gtrx/arc-undead-recolor-master/install.sh",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/gtk-3.20/scss/_colors.scss",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/gtk-3.20/gtk.css",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/index.theme",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/gtk-3.0/gtk.gresource.xml",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/gtk-3.0/scss/_colors.scss",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/gtk-3.0/scss/gtk-dark.scss",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/gtk-3.0/scss/_widgets.scss",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/gtk-3.0/scss/gtk.scss",
				"/home/gtrx/i3wm-themer/themes/Colors/.themes/Colos_improved/gtk-3.0/gtk.css",
				"/home/gtrx/Documents/Review(1).docx",
				"/home/gtrx/Downloads/Ohgod__.docx",
				"/home/gtrx/Arduino/Arduino/Arduino.ino",
				"/home/gtrx/.armitage.prop",
				"/home/gtrx/.config/sublime-text-3/Packages/User/Plain text.sublime-settings",
				"/home/gtrx/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
				"/etc/netctl/examples/wireless-wpa",
				"/etc/netctl/examples/wireless-wpa-static",
				"/home/gtrx/.config/compton.conf",
				"/etc/systemd/system/multi-user.target.wants/NetworkManager.service",
				"/etc/NetworkManager/NetworkManager.conf",
				"/home/gtrx/Downloads/kys.exe",
				"/home/gtrx/i3wm-themer/themes/Clouds/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Colors/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Water/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Subway/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Space/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Sky/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Nature/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Minimal/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Ice/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Grayscale/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Forest/.config/polybar/config",
				"/home/gtrx/i3wm-themer/backups/workingcrap/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Forest/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Clouds/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Fire/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Grayscale/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Ice/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Minimal/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Nature/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Sky/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Space/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Subway/.config/polybar/config",
				"/home/gtrx/i3wm-themer/templated_themes/Water/.config/polybar/config",
				"/home/gtrx/i3wm-themer/scripts/i3wmthemer",
				"/home/gtrx/i3wm-themer/themes/Fire/.config/polybar/config",
				"/home/gtrx/i3wm-themer/themes/Colors/.config/polybar/Find Results",
				"/etc/UPower/UPower.conf",
				"/usr/share/dbus-1/services/org.knopwob.dunst.service"
			],
			"find":
			{
				"height": 36.0
			},
			"find_in_files":
			{
				"height": 181.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"compton",
					"282828",
					"2b2b2b",
					"303030",
					"2b282a",
					"232122",
					"2f2e30",
					"162025",
					"toolkit",
					"tool",
					"bet",
					"enter",
					"editor",
					"#752a2a",
					"752a2a",
					"#752a2a",
					"button",
					"#1b1b1b;",
					"#020202",
					"#9e9e9e",
					"+i",
					"+l"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/gtrx/.config/i3/config",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7167,
								"regions":
								{
								},
								"selection":
								[
									[
										7000,
										7000
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/zzz A File Icon zzz/aliases/XML (Config).sublime-syntax",
									"tab_size": 8,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 3982.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/gtrx/.config/compton.conf",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 8626,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										34
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/home/gtrx/.extend.Xresources",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1995,
								"regions":
								{
								},
								"selection":
								[
									[
										58,
										58
									],
									[
										1118,
										1118
									],
									[
										1540,
										1540
									],
									[
										1646,
										1646
									],
									[
										1664,
										1664
									],
									[
										1673,
										1673
									],
									[
										1709,
										1709
									],
									[
										1727,
										1727
									],
									[
										1736,
										1736
									],
									[
										1772,
										1772
									],
									[
										1790,
										1790
									],
									[
										1799,
										1799
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 846.0,
								"zoom_level": 1.0
							},
							"stack_index": 12,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/gtrx/.zshrc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3204,
								"regions":
								{
								},
								"selection":
								[
									[
										109,
										109
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/etc/oidentd.conf",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 0,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/home/gtrx/Desktop/afzaalace-synergy-stable-builds-c30301e/INSTALL",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 78,
								"regions":
								{
								},
								"selection":
								[
									[
										78,
										78
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": 25,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/home/gtrx/.cache/.fr-pV0jBs/MPU6050/MPU6050.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 8035,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": 26,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/C++/C++.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "/home/gtrx/.cache/.fr-QKxBdp/LedControl/LedControl.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6708,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/C++/C++.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "/home/gtrx/.cache/.fr-PphcQJ/DS3231/DS3231.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4179,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/C++/C++.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 9,
							"file": "/home/gtrx/Downloads/Action_Plan_Madagascar__6_.docx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 240540,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content"
									],
									"syntax": "Packages/zzz A File Icon zzz/aliases/Plain Text (Microsoft Word).sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 10,
							"type": "text"
						},
						{
							"buffer": 10,
							"file": "/home/gtrx/.dunstrc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7133,
								"regions":
								{
								},
								"selection":
								[
									[
										7133,
										7133
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": 18,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 5083.0,
								"zoom_level": 1.0
							},
							"stack_index": 9,
							"type": "text"
						},
						{
							"buffer": 11,
							"file": "/home/gtrx/bettercap/README.md",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3125,
								"regions":
								{
								},
								"selection":
								[
									[
										2382,
										2382
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"git_gutter_is_enabled": true,
									"syntax": "Packages/Markdown/Markdown.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 914.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 12,
							"file": "/home/gtrx/.config/termite/Config.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1044,
								"regions":
								{
								},
								"selection":
								[
									[
										9,
										9
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 11,
							"type": "text"
						},
						{
							"buffer": 13,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1222,
								"regions":
								{
								},
								"selection":
								[
									[
										1222,
										1222
									]
								],
								"settings":
								{
									"auto_indent": false,
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"git_gutter_is_enabled": false,
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_width": 2,
									"word_wrap": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 14,
							"type": "text"
						},
						{
							"buffer": 14,
							"file": "/home/gtrx/.config/rofi/config.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 0,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 15,
							"type": "text"
						},
						{
							"buffer": 15,
							"file": "/home/gtrx/.config/polybar/config",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5691,
								"regions":
								{
								},
								"selection":
								[
									[
										1101,
										1101
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"git_gutter_is_enabled": false,
									"syntax": "Packages/zzz A File Icon zzz/aliases/XML (Config).sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 1100.0,
								"zoom_level": 1.0
							},
							"stack_index": 13,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 36.0
			},
			"input":
			{
				"height": 56.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 144.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"output.stino_build_panel":
			{
				"height": 0.0
			},
			"output.stino_panel":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,0,0,0,0,0,49,1916,1078,1920,1080",
			"project": "",
			"replace":
			{
				"height": 67.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": false,
			"side_bar_width": 203.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 5,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
